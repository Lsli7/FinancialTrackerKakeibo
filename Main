import tkinter as tk
from tkinter import ttk, messagebox
import csv
import os
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class FinancialApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Kakeibo Financial Dashboard")

        # Initialize CSV files
        self.transactions_file = 'transactions.csv'
        self.goals_file = 'goals.csv'
        self.reflections_file = 'reflections.csv'

        # Create files if they don't exist
        self.create_files()

        # Load existing data
        self.transactions = self.load_data(self.transactions_file)
        self.goals = self.load_goals(self.goals_file)  # Load goals from CSV
        self.reflections = self.load_data(self.reflections_file)

        # Frame for User Interface
        self.frame = tk.Frame(root)
        self.frame.pack(padx=10, pady=10)

        self.create_widgets()

    def create_files(self):
        """ Create the necessary CSV files if they do not exist """
        if not os.path.exists(self.transactions_file):
            with open(self.transactions_file, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(['Transaction Type', 'Amount', 'Category', 'Description', 'Date'])  # Headers

        if not os.path.exists(self.goals_file):
            with open(self.goals_file, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(['Goal Name', 'Target Amount', 'Target Date', 'Amount Saved'])  # Headers

        if not os.path.exists(self.reflections_file):
            with open(self.reflections_file, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(['Month', 'Reflection'])  # Headers

    def load_data(self, file_name):
        """ Load data from a CSV file """
        data = []
        if os.path.exists(file_name):
            with open(file_name, newline='') as file:
                reader = csv.reader(file)
                next(reader)  # Skip headers
                for row in reader:
                    data.append(row)
        return data

    def load_goals(self, file_name):
        """ Load goals from the CSV file """
        goals = []
        if os.path.exists(file_name):
            with open(file_name, newline='') as file:
                reader = csv.reader(file)
                next(reader)  # Skip headers
                for row in reader:
                    # Add each goal with its name, target amount, target date, and amount saved
                    goal_name, target_amount, target_date, amount_saved = row
                    goals.append([goal_name, float(target_amount), target_date, float(amount_saved)])
        return goals

    def create_widgets(self):
        """ Create the dashboard interface """
        self.dashboard_frame = tk.LabelFrame(self.frame, text="Dashboard Overview", padx=10, pady=10)
        self.dashboard_frame.grid(row=0, column=0, padx=10, pady=10)

        # Total Income, Expenses, Savings, Remaining Balance
        self.total_income_label = tk.Label(self.dashboard_frame, text="Total Income: $0", font=("Arial", 14))
        self.total_income_label.grid(row=0, column=0, padx=10, pady=10)

        self.total_expenses_label = tk.Label(self.dashboard_frame, text="Total Expenses: $0", font=("Arial", 14))
        self.total_expenses_label.grid(row=1, column=0, padx=10, pady=10)

        self.savings_label = tk.Label(self.dashboard_frame, text="Savings for Goals: $0", font=("Arial", 14))
        self.savings_label.grid(row=2, column=0, padx=10, pady=10)

        self.remaining_balance_label = tk.Label(self.dashboard_frame, text="Remaining Balance: $0", font=("Arial", 14))
        self.remaining_balance_label.grid(row=3, column=0, padx=10, pady=10)

        # Buttons to Add Transaction, View Report, and Manage Goals
        self.add_transaction_button = tk.Button(self.dashboard_frame, text="Add Transaction", command=self.add_transaction)
        self.add_transaction_button.grid(row=4, column=0, padx=10, pady=10)

        self.view_report_button = tk.Button(self.dashboard_frame, text="View Monthly Report", command=self.view_report)
        self.view_report_button.grid(row=5, column=0, padx=10, pady=10)

        self.manage_goals_button = tk.Button(self.dashboard_frame, text="Manage Goals", command=self.manage_goals)
        self.manage_goals_button.grid(row=6, column=0, padx=10, pady=10)

        # Update the dashboard to show current financial summary
        self.update_dashboard()

    def update_dashboard(self):
        """ Update financial dashboard with totals and balances """
        total_income = sum(float(t[1]) for t in self.transactions if t[0] == 'Income')
        total_expenses = sum(float(t[1]) for t in self.transactions if t[0] == 'Expense')
        remaining_balance = total_income - total_expenses

        # Update Savings for Goals
        total_savings_for_goals = sum(float(goal[3]) for goal in self.goals)  # Total amount saved for all goals

        self.total_income_label.config(text=f"Total Income: ${total_income}")
        self.total_expenses_label.config(text=f"Total Expenses: ${total_expenses}")
        self.savings_label.config(text=f"Savings for Goals: ${total_savings_for_goals}")
        self.remaining_balance_label.config(text=f"Remaining Balance: ${remaining_balance}")

    def add_transaction(self):
        """ Show a dialog to add a transaction (income, expense) """
        def save_transaction():
            try:
                transaction_type = transaction_type_var.get()
                amount = float(amount_entry.get())
                category = category_var.get()
                description = description_entry.get()
                date = date_entry.get()

                if not (transaction_type and amount and category and date):
                    raise ValueError("Please fill in all fields.")

                try:
                    # Validate date format
                    datetime.strptime(date, "%Y-%m-%d")
                except ValueError:
                    raise ValueError("Invalid date format. Use YYYY-MM-DD.")

                transaction = [transaction_type, str(amount), category, description, date]
                self.transactions.append(transaction)

                # Save transaction to CSV file
                with open(self.transactions_file, 'a', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow(transaction)

                # Update dashboard
                self.update_dashboard()

                top.destroy()

            except ValueError as e:
                messagebox.showerror("Input Error", str(e))

        # Open a new dialog window for entering a transaction
        top = tk.Toplevel(self.root)
        top.title("Add Transaction")

        # Transaction type (Income, Expense)
        transaction_type_var = tk.StringVar(value='Income')
        amount_entry = tk.Entry(top)
        category_var = tk.StringVar(value='Salary')  # Default category for income
        description_entry = tk.Entry(top)
        date_entry = tk.Entry(top)

        # Widgets for collecting transaction data
        tk.Label(top, text="Transaction Type").grid(row=0, column=0)
        ttk.Combobox(top, textvariable=transaction_type_var, values=["Income", "Expense"]).grid(row=0, column=1)

        tk.Label(top, text="Amount ($)").grid(row=1, column=0)
        amount_entry.grid(row=1, column=1)

        tk.Label(top, text="Category").grid(row=2, column=0)
        ttk.Combobox(top, textvariable=category_var, values=["Needs", "Wants", "Culture", "Unplanned", "Salary"]).grid(row=2, column=1)

        tk.Label(top, text="Description").grid(row=3, column=0)
        description_entry.grid(row=3, column=1)

        tk.Label(top, text="Date (YYYY-MM-DD)").grid(row=4, column=0)
        date_entry.grid(row=4, column=1)

        save_button = tk.Button(top, text="Save", command=save_transaction)
        save_button.grid(row=5, column=0, columnspan=2)

    def view_report(self):
        """ View a more interactive report with graphs """
        expense_categories = {"Needs": 0, "Wants": 0, "Culture": 0, "Unplanned": 0}
        for t in self.transactions:
            if t[0] == 'Expense':
                expense_categories[t[2]] += float(t[1])

        report_window = tk.Toplevel(self.root)
        report_window.title("Monthly Report")

        # Bar Chart for Income vs Expenses
        fig, ax = plt.subplots(1, 1, figsize=(6, 4))
        ax.bar(['Income', 'Expenses'], [sum(float(t[1]) for t in self.transactions if t[0] == 'Income'),
                                       sum(float(t[1]) for t in self.transactions if t[0] == 'Expense')])
        ax.set_ylabel('Amount ($)')
        ax.set_title('Income vs Expenses')

        # Embed bar chart in Tkinter window
        canvas = FigureCanvasTkAgg(fig, master=report_window)
        canvas.draw()
        canvas.get_tk_widget().pack(padx=10, pady=10)

        # Pie Chart for Expense Distribution
        labels = list(expense_categories.keys())
        sizes = list(expense_categories.values())
        fig2, ax2 = plt.subplots(1, 1, figsize=(6, 4))
        ax2.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        ax2.axis('equal')
        ax2.set_title("Expense Distribution")

        # Embed pie chart in Tkinter window
        canvas2 = FigureCanvasTkAgg(fig2, master=report_window)
        canvas2.draw()
        canvas2.get_tk_widget().pack(padx=10, pady=10)

    def manage_goals(self):
        """ Manage and view the progress of goals """
        goal_window = tk.Toplevel(self.root)
        goal_window.title("Manage Goals")

        if not self.goals:
            tk.Label(goal_window, text="No goals yet. Add new goals.").pack(padx=10, pady=10)

        goal_labels = []  # Keep track of labels so we can update them later

        def refresh_goals():
            for label in goal_labels:
                label.destroy()  # Remove old labels

            for idx, goal in enumerate(self.goals):
                goal_name, target_amount, target_date, amount_saved = goal
                goal_text = f"{goal_name} - Target: ${target_amount}, Saved: ${amount_saved}, Date: {target_date}"
                label = tk.Label(goal_window, text=goal_text)
                label.grid(row=idx, column=0, padx=10, pady=5)
                goal_labels.append(label)

        # Initial display of goals
        refresh_goals()

        def add_goal():
            """ Open a form to add a new goal """

            def save_goal():
                goal_name = goal_name_entry.get()
                target_amount = float(target_amount_entry.get())
                target_date = target_date_entry.get()

                if not goal_name or not target_amount or not target_date:
                    messagebox.showerror("Input Error", "Please fill all fields.")
                    return

                try:
                    datetime.strptime(target_date, "%Y-%m-%d")
                except ValueError:
                    messagebox.showerror("Input Error", "Invalid date format. Use YYYY-MM-DD.")
                    return

                new_goal = [goal_name, target_amount, target_date, 0.0]
                self.goals.append(new_goal)

                with open(self.goals_file, 'a', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow(new_goal)

                goal_input_window.destroy()  # Close the goal input window
                refresh_goals()  # Update the goal list in the main window

            goal_input_window = tk.Toplevel(self.root)
            goal_input_window.title("Add Goal")

            tk.Label(goal_input_window, text="Goal Name:").grid(row=0, column=0)
            goal_name_entry = tk.Entry(goal_input_window)
            goal_name_entry.grid(row=0, column=1)

            tk.Label(goal_input_window, text="Target Amount:").grid(row=1, column=0)
            target_amount_entry = tk.Entry(goal_input_window)
            target_amount_entry.grid(row=1, column=1)

            tk.Label(goal_input_window, text="Target Date (YYYY-MM-DD):").grid(row=2, column=0)
            target_date_entry = tk.Entry(goal_input_window)
            target_date_entry.grid(row=2, column=1)

            save_button = tk.Button(goal_input_window, text="Save", command=save_goal)
            save_button.grid(row=3, column=0, columnspan=2)

        add_goal_button = tk.Button(goal_window, text="Add New Goal", command=add_goal)
        add_goal_button.pack(padx=10, pady=10)


# Main function to start the app
if __name__ == "__main__":
    root = tk.Tk()
    app = FinancialApp(root)
    root.mainloop()
